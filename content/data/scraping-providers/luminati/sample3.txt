<html><head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bot / Headless Chrome Detection Tests</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css" integrity="sha512-HK5fgLBL+xu6dm/Ii3z4xhlSUyZgTT9tuc/hSrtw6uzJOvgRr2a9jyxxT1ely+B+xFAmJKVSTbpM/CuL7qxO8w==" crossorigin="anonymous">
    <style>
      iframe.canvased {
          display: none;
      }

      .modal-content {
        width: 50%;
        height: 80%;
      }

      body {
        padding: 7px;
      }

      fieldset {
        border: 4px dotted red;
        padding: 16px;
      }

      fieldset legend {
        font-size: 20px;
        color: red;
      }

      hr {
        margin-top: 2rem;
        margin-bottom: 2rem;
      }

      #botScore {
        margin-top: 1rem;
        font-size: 18px;
        font-family: monospace;
        border: 3px solid #2b2b2b;
        padding: 9px;
        font-weight: 600;
      }

      #behavioralScore {
        color: rgb(0, 0, 0);
        font-weight: 700;
        font-size: 116%;
      }
    </style>

    <link rel="stylesheet" href="highlightjs/styles/stackoverflow-dark.css">
    <script src="highlightjs/highlight.pack.js"></script><style type="text/css"></style>

    <script src="https://cdn.jsdelivr.net/npm/ua-parser-js@0.7.23/src/ua-parser.min.js"></script>
    <script src="./fpCollect.min.js"></script>
    <script src="./fpScanner.js"></script>

  </head>
  <body>
    <script type="text/javascript" src="https://abs.incolumitas.com/lib.js"></script>
    <section style="margin-top: 20px;">
      <div class="container">
        <div class="content">
          <h1 class="title">Curated List of Bot / Headless Chrome Detection Tests</h1>
          <p><strong>v0.4.8 (7th March 2021) ðŸš€</strong></p>
          <div class="buttons">
            <button onclick="showModal('puppeteer')" class="button is-info is-small">Use with Puppeteer</button>
            <button onclick="showModal('playwright')" class="button is-info is-small">Use with Playwright</button>
            <button onclick="showModal('realChrome')" class="button is-info is-small">Use with Google Chrome</button>
            <button onclick="showModal('advanced')" class="button is-info is-small">Use with Advanced Bot</button>
          </div>

          <div class="modal">
            <div onclick="showModal()" class="modal-background"></div>
            <div class="modal-content">
              <pre id="botCode">              </pre>
            </div>
            <button onclick="showModal()" class="modal-close is-large" aria-label="close"></button>
          </div>

          <p>
            This page attempts to detect if you are a bot or not and is constanlty being updated.
          </p>

          Table of Contents
          <ol>
            <li><a href="#botBehavior">Behavioral Classification</a></li>
            <li><a href="#moreInfo">More Sources and Links</a></li>
            <li><a href="#botChallenge">Bot Challenge</a></li>
            <li><a href="#newDetectionTests">New Detection Tests</a></li>
            <li><a href="#oldDetectionTests">Old Detection Tests</a></li>
            <li><a href="#httpHeadersTitle">Http Headers</a></li>
            <li><a href="#tcpipFingerprint">TCP/IP Fingerprint</a></li>
            <li><a href="#tlsFingerprint">TLS Fingerprint</a></li>
            <li><a href="#fingerprintjs">Browser Fingerprint</a></li>
            <li><a href="#canvasFp">Canvas Fingerprint</a></li>
            <li><a href="#webglFp">WebGL Fingerprint</a></li>
            <li><a href="#browserData">Browser Data</a></li>
          </ol>

          <hr>

          <h4 id="botBehavior" class="title is-4">Behavioral Bot Classification</h4>

          <p>
            The test <code>behavioralClassificationScore</code> gives a
            rating between <strong>0 (Bot)</strong> and <strong>1 (Human)</strong> based on advanced behavioral heuristics.
            A <strong>score below 0.5</strong> means that you are most likely a bot.
          </p>

          <p>
            The score is computed after seven seconds of browsing on this site. If you want a new score, refresh this page.
          </p>

          <p>
            Don't worry if you are browsing this page and you are given a score between 0.7 and 1.0,
            the <code>behavioralClassificationScore</code> consist of 30+ individual classificators
            and it is normal that there are false positives.
          </p>

          <p>
            In order to test your bot with a real world problem, your bot has to <a href="#botChallenge">solve the challenge below</a>.
          </p>

          <span id="botScore">
            <span>Your Behavioral Score: <span id="behavioralScore">...</span></span>
          </span>

          <hr>

          <script>
            var toggleInfo = function() {
              var el = document.getElementById('botInfo');
              if (el.style.display === 'none') {
                el.style.display = 'block';
              } else {
                el.style.display = 'none';
              }
            }
          </script>

          <h4 class="title is-4">More Sources/Information</h4>
          <button id="moreInfo" onclick="toggleInfo()" class="button is-primary">
            Expand all Sources / Links
          </button>

          <hr>

          <div id="botInfo" style="display: none;">
            <h4 class="is-4">Resources and Sources</h4>
            <div class="columns">
              <div class="column">
                <ol>
                  <li>Kinda outdated (selenium, phantomjs): <a href="https://bot.sannysoft.com/">bot.sannysoft.com</a> and <a href="https://github.com/infosimples/detect-headless">a GitHub repo</a> from early 2019 with similar detection techniques.</li>
                  <li><a href="https://github.com/infosimples/detect-headless">Headless detection GitHub Repo</a>, last update in 2019</li>
                  <li>Lot of good stuff from here: <a href="https://github.com/berstend/puppeteer-extra/tree/master/packages/puppeteer-extra-plugin-stealth">puppeteer-extra-plugin-stealth</a></li>
                  <li>Antoine Vastel: <a href="https://antoinevastel.com/bots/">antoinevastel.com/bots</a> and a more recent <a href="https://arh.antoinevastel.com/bots/areyouheadless">detection page using HTTP Headers</a> and his employers <a href="https://antoinevastel.com/bots/datadome">datadome detection page</a></li>
                  <li>Pretty active <a href="https://gist.github.com/tegansnyder/c3aeae4d57768c58247ae6c4e5acd3d1">GitHub Gist</a> about preventing puppeteer detection</li>
                  <li>Rather <a href="https://github.com/digitalhurricane-io/puppeteer-detection-100-percent">new detection method</a> found on GitHub </li>
                  <li><a href="https://arh.antoinevastel.com/bots/areyouheadless">Vastel is detecting puppeteer with HTTP headers in early 2019...</a></li>
                  <li>hacker news <a href="https://news.ycombinator.com/item?id=20479015">discussion</a> started by Vastel</li>
                  <li>And <a href="https://www.tenantbase.com/tech/blog/cat-and-mouse/">the response from Evan Sangaline</a>, where he passes the new detection again</li>
                  <li>Rather recent article (February 2020) about <a href="https://antoinevastel.com/javascript/2020/02/09/detecting-web-bots.html">Bot Detection 101</a> principles</li>
                  <li>Very recent (31 January 2021) and powerful bot / headless / puppeteer <a href="https://github.com/niespodd/browser-fingerprinting/blob/main/README.md">detection techniques</a></li>
                  <li><a href="https://chebrowser.site/">Che Browser</a>, is it any good?</li>
                  <li><a href="https://secretagent.dev/">SecretAgent</a>, The Web Browser Built for Scraping</li>
                </ol>
              </div>
              <div class="column">
                <img width="416" height="312" src="robotVeryGood.gif">
              </div>
            </div>

            <h4 class="is-4">Other Bot Detection Sites</h4>
            <ul>
              <li><a href="https://browserleaks.com/">browserleaks.com</a> (very valuable information)</li>
              <li><a href="https://pixelscan.net/">pixelscan</a> (quite good and new)</li>
              <li><a href="https://abrahamjuliot.github.io/creepjs/">creepjs</a> (this guy is crazy)</li>
            </ul>

            <h4 class="is-4">The cats: Anti Bot Companies</h4>

            The following Anti Bot companies are all using their custom JavaScript detection algorithms.

            <div class="columns">
              <div class="column">
                <ul>
                  <li><a href="https://www.shapesecurity.com/">Shape Security</a></li>
                  <li><a href="https://datadome.co/">DataDome</a></li>
                  <li><a href="">Distil Networks (Acuired)</a></li>
                  <li><a href="https://www.imperva.com/">Imperva</a></li>
                  <li><a href="https://www.imperva.com/">Incapsula (Imperva now)</a></li>
                  <li><a href="https://www.perimeterx.com/">PerimeterX</a></li>
                  <li><a href="https://www.akamai.com/de/de/">Akamai</a></li>
                  <li><a href="https://fingerprintjs.com/">FingerprintJS</a></li>
                </ul>
              </div>
              <div class="column">
                <ul>
                  <li><a href="https://www.whiteops.com/">WhiteOps</a></li>
                  <li><a href="https://www.radwarebotmanager.com/">ShieldSquare</a></li>
                  <li><a href="https://www.f5.com/">F5</a></li>
                  <li><a href="https://www.cloudflare.com/">Cloudflare (The End Boss)</a></li>
                  <li><a href="https://www.arkoselabs.com/">Arkose Labs</a></li>
                  <li><a href="https://www.forter.com/">Forter Protection</a></li>
                  <li><a href="https://www.google.com/recaptcha/about/">reCAPTCHA</a></li>
                  <li><a href="https://www.biocatch.com/">BioCatch</a></li>
                </ul>
              </div>
            </div>

            <h4 class="is-4">Mouses: Bot/Proxy Companies (Selection)</h4>

            The following Bot companies are either selling bot/scraping or anonymization technology (Proxies, VPN)

            <div class="columns">
              <div class="column">
                <ul>
                  <li><a href="https://zenscrape.com/">ZenScrape</a></li>
                  <li><a href="https://luminati.io/">Luminati.io</a></li>
                  <li><a href="https://stormproxies.com/">Stormproxies</a></li>
                  <li><a href="https://www.scraperapi.com/">scraperapi.com</a></li>
                  <li><a href="https://scrapingrobot.com/">scrapingrobot.com</a></li>
                </ul>
              </div>
              <div class="column">
                <ul>
                  <li><a href="https://www.scrapinghub.com/crawlera">scrapinghub</a></li>
                  <li><a href="https://packetstream.io/">packetstream</a></li>
                  <li><a href="https://apify.com/">Apify</a></li>
                  <li><a href="https://www.scrapingbee.com/">scrapingbee.com</a></li>
                </ul>
              </div>
            </div>
            <hr>
          </div>

        </div>
      </div>
    </section>

    <script src="usage.js"></script>

    <section id="botChallenge">
      <div class="container">
        <div class="content">
          <h4 class="title is-4">Bot Challenge</h4>
          <p>
            Your bot has to fill out the form below and submit it. Then you are prompted to 
            confirm the pop-up dialoge. After confirmation, you will see a table with basket items and prices.
            Update the prices of this table and scrape the data as a final step.
          </p>

          <p>
            Completing all those steps provides enough behaviroal information
            in order to classify you as <a href="https://incolumitas.com/pages/BotOrNot/">BotOrNot</a>.
          </p>

          <button class="button is-primary" onclick="showModal('puppeteer')">Show Code to Solve The Bot Challenge</button>
        </div>
        <hr>

        <fieldset>
          <legend>Bot Challenge</legend>
          <div id="botChallengeContainer" class="columns">
            <div id="formStuff" class="column is-6">
              <div id="userNameField" class="field">
                <label class="label">Username</label>
                <div class="control has-icons-left has-icons-right">
                  <input name="userName" class="input" type="text" placeholder="Text input" value="not_a_bot">
                  <span class="icon is-small is-left">
                    <i class="fas fa-user"></i>
                  </span>
                  <span class="icon is-small is-right">
                    <i class="fas fa-check"></i>
                  </span>
                </div>
                <p class="help is-danger"></p>
              </div>
              
              <div id="emailField" class="field">
                <label class="label">Email</label>
                <div class="control has-icons-left has-icons-right">
                  <input name="eMail" class="input" type="email" placeholder="Email input" value="hello@">
                  <span class="icon is-small is-left">
                    <i class="fas fa-envelope"></i>
                  </span>
                  <span class="icon is-small is-right">
                    <i class="fas fa-check"></i>
                  </span>
                </div>
                <p class="help is-danger"></p>
              </div>
              
              <div class="field">
                <label class="label">Number of Cookies</label>
                <div class="control">
                  <div class="select">
                    <select name="cookies">
                      <option>One Cookie</option>
                      <option>Two Cookies</option>
                      <option>Three Cookies</option>
                      <option>I want all the Cookies</option>
                    </select>
                  </div>
                </div>
              </div>
              
              <div class="field">
                <div class="control">
                  <label class="checkbox">
                    <input name="terms" type="checkbox">
                    I agree to the <a href="#">terms and conditions</a>
                  </label>
                </div>
              </div>
              
              <div id="catField" class="field">
                <div class="control">
                  <label class="radio">
                    <input name="radioCat" type="radio" id="smolCat">
                    I like Cats
                  </label>
                  <label class="radio">
                    <input name="radioCat" type="radio" id="bigCat">
                    I like big Cats
                  </label>
                </div>
                <p class="help is-danger"></p>
              </div>
              
              <div class="field is-grouped">
                <div class="control">
                  <button id="submit" class="button is-link">Submit</button>
                </div>
              </div>
            </div>
            <div id="tableStuff" class="column is-8" style="display: none">

              <script>
                var botQuestion = function() {
                  if (confirm('Click "OK" if you are NOT a bot!')) {
                    var fs = document.querySelector('#formStuff')
                    fs.style.display = 'none';
                    var ts = document.querySelector('#tableStuff')
                    ts.style.display = 'block';
                  } else {
                    var fs = document.querySelector('#formStuff')
                    fs.innerHTML = '<strong>Bad Bot</strong>';
                  }
                }

                var updatePrice = function(index) {
                  var priceTag = document.getElementById('price' + index);
                  var button = document.getElementById('updatePrice' + index);
                  button.classList.add('is-loading');
                  setTimeout(function() {
                    button.classList.remove('is-loading');
                    priceTag.setAttribute('data-last-update', (new Date()).getTime());
                    priceTag.innerText = Math.floor( Math.random() * 5000 ) + '$'; 
                  }, Math.random() * 2000);
                }
              </script>

              <div class="table-container">
                <table class="table">
                  <thead>
                    <tr>
                      <th><abbr title="Name">Name</abbr></th>
                      <th><abbr title="Super High Price"></abbr>Price</th>
                      <th><abbr title="URL">URL</abbr></th>
                      <th><abbr title="Update Price">Price Update</abbr></th>
                    </tr>
                  </thead>
                  <tbody>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </fieldset>

        <script>
          var button = document.getElementById('submit');
          button.addEventListener('click', function (event) {
            event.preventDefault();

            var status = true;
            button.classList.add('is-loading');

            var cookieSelection = document.querySelector('[name="cookies"]');

            const data = {
              userName: document.querySelector('[name="userName"]').value,
              email: document.querySelector('[name="eMail"]').value,
              cookies: cookieSelection.options[cookieSelection.selectedIndex].value,
              terms: document.querySelector('[name="terms"]').value,
              smolCat: document.getElementById('smolCat').checked,
              bigCat: document.getElementById('bigCat').checked,
            }

            console.log(JSON.stringify(data))

            var helpName = document.querySelector('#userNameField .help')
            var nameInput = document.querySelector('#userNameField input')
            if (data.userName === 'not_a_bot') {
              helpName.classList.add('is-danger');
              helpName.innerHTML = 'This username is taken!'
              nameInput.classList.remove('is-success')
              nameInput.classList.add('is-danger')
              status = false;
            } else {
              helpName.classList.remove('is-danger');
              helpName.classList.add('is-success');
              helpName.innerText = 'This username looks good ðŸš€ðŸš€ðŸš€'
              nameInput.classList.remove('is-danger')
              nameInput.classList.add('is-success')
            }

            var helpEmail = document.querySelector('#emailField .help')
            var emailInput = document.querySelector('#emailField input')
            if (data.email === 'hello@') {
              helpEmail.classList.add('is-danger');
              helpEmail.innerHTML = 'This email is invalid!'
              emailInput.classList.remove('is-success')
              emailInput.classList.add('is-danger')
              status = false;
            } else {
              helpEmail.classList.remove('is-danger');
              helpEmail.classList.add('is-success');
              helpEmail.innerText = 'This email looks good ðŸš€ðŸš€ðŸš€'
              emailInput.classList.remove('is-danger')
              emailInput.classList.add('is-success')
            }

            var helpCat = document.querySelector('#catField .help')
            if (!data.smolCat && !data.bigCat) {
              helpCat.classList.add('is-danger');
              helpCat.innerHTML = 'You have to like SOME cat! ðŸ˜¿ðŸ˜¿ðŸ˜¿'
              status = false;
            } else {
              helpCat.classList.remove('is-danger');
              helpCat.classList.add('is-success');
              helpCat.innerHTML = 'ðŸ˜»ðŸ˜»ðŸ˜»'
            }

            if (status === false) {
              button.classList.remove('is-loading');
              return false;
            }

            fetch('https://abs.incolumitas.com/mockData', {
              method: 'POST',
              body: JSON.stringify(data),
            }).then(function (response) {
              if (response.ok) {
                return response.json();
              }
              return Promise.reject(response);
            }).then(function (data) {
              let el = document.querySelector('#tableStuff tbody');
              data.forEach((row, index) => {
                el.innerHTML += `
                <tr><td class="name">${row.name}</td>
                <td class="price"><strong id="price${index}">${row.price}</strong></td>
                <td class="url"><a href="${row.url}">${row.url}</a></td>
                <td class="priceUpdate"><button id="updatePrice${index}" class="button is-small is-dark" onclick="updatePrice(${index})">Update Price</button></td></tr>`
              })
              botQuestion();
            }).catch(function (error) {
              console.warn(error);
            }).finally(function () {
              button.classList.remove('is-loading');
            })
          });
        </script>

      </div>
    </section>

    <hr>

    <script>
      var old_results = {
        intoli: {},
        fpscanner: {},
      };
    </script>

    <section>
      <div class="container">
        <h4 id="newDetectionTests" class="title is-4">New Detection Tests 
          <a style="font-size: 70%" href="https://github.com/berstend/puppeteer-extra/issues/403">[1]</a> 
          <a style="font-size: 70%" href="https://github.com/berstend/puppeteer-extra/issues/407">[2]</a> 
          <a style="font-size: 70%" href="https://github.com/niespodd/browser-fingerprinting">[3]</a></h4>

        <pre id="new-tests">{
  "puppeteerEvaluationScript": "OK",
  "webdriverPresent": "OK",
  "connectionRTT": "OK",
  "refMatch": "OK",
  "overrideTest": "OK",
  "overflowTest": "FAIL",
  "puppeteerExtraStealthUsed": "OK",
  "inconsistentUserAgent": "OK",
  "inconsistentLanguages": "OK"
}</pre>

        <hr>

        <h4 id="oldDetectionTests" class="title is-4">Old Bot Detection Tests (Intoli.com tests + additions, Fingerprint Scanner tests)</h4>
        <pre id="detection-tests">{
  "intoli": {
    "userAgent": "OK",
    "webDriver": "OK",
    "webDriverAdvanced": "OK",
    "pluginsLength": "OK",
    "pluginArray": "OK",
    "languages": "OK"
  },
  "fpscanner": {
    "PHANTOM_UA": "OK",
    "PHANTOM_PROPERTIES": "OK",
    "PHANTOM_ETSL": "OK",
    "PHANTOM_LANGUAGE": "OK",
    "PHANTOM_WEBSOCKET": "OK",
    "MQ_SCREEN": "OK",
    "PHANTOM_OVERFLOW": "OK",
    "PHANTOM_WINDOW_HEIGHT": "OK",
    "HEADCHR_UA": "OK",
    "WEBDRIVER": "OK",
    "HEADCHR_CHROME_OBJ": "OK",
    "HEADCHR_PERMISSIONS": "OK",
    "HEADCHR_PLUGINS": "OK",
    "HEADCHR_IFRAME": "OK",
    "CHR_DEBUG_TOOLS": "OK",
    "SELENIUM_DRIVER": "OK",
    "CHR_BATTERY": "OK",
    "CHR_MEMORY": "OK",
    "TRANSPARENT_PIXEL": "OK",
    "SEQUENTUM": "OK",
    "VIDEO_CODECS": "OK"
  }
}</pre>

        <hr>

        <h4 id="httpHeadersTitle" class="title is-4">HTTP Headers</h4>
        <pre id="httpHeaders">{
  "ip": "98.113.59.48",
  "headers": {
    "host": "abs.incolumitas.com",
    "connection": "close",
    "accept-language": "en-US,en;q=0.9",
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36",
    "accept": "*/*",
    "sec-fetch-site": "same-site",
    "sec-fetch-mode": "cors",
    "sec-fetch-dest": "empty",
    "referer": "https://bot.incolumitas.com/",
    "accept-encoding": "gzip, deflate, br"
  }
}</pre>

        <hr>

        <h4 id="tcpipFingerprint" class="title is-4">p0f - Passive TCP/IP Fingerprint 
          <a style="font-size: 70%" href="https://lcamtuf.coredump.cx/p0f3/">[1]</a> 
        </h4>
        <pre id="p0f">First seen    = 2021/03/07 22:43:00<br>Last update   = 2021/03/07 22:43:00<br>Total flows   = 5<br>Detected OS   = Linux 2.2.x-3.x [generic]<br>HTTP software = ???<br>Network link  = Ethernet or modem<br>Language      = ???<br>Distance      = 16<br>Uptime        = 26 days 4 hrs 46 min (modulo 497 days)<br></pre>

        <hr>

        <script>
          fetch('https://abs.incolumitas.com/p0f') 
            .then(response => response.text())
            .then(function(text) {
              document.getElementById('p0f').innerText = text;
            })
            .catch((err) => {
              document.getElementById('p0f').innerText = err.toString();
            })
        </script>

        <h4 id="tlsFingerprint" class="title is-4">ja3 - Passive SSL/TLS Fingerprint 
          <a style="font-size: 70%" href="https://github.com/salesforce/ja3">[1]</a> 
        </h4>
        <pre id="ja3">[<br>  {<br>    "ja3_digest": "7f805430de1e7d98b1de033adb58cf46",<br>    "source_ip": "98.113.59.48",<br>    "timestamp": "2021-03-07T22:43:00.994Z"<br>  },<br>  {<br>    "ja3_digest": "b32309a26951912be7dba376398abc3b",<br>    "source_ip": "98.113.59.48",<br>    "timestamp": "2021-03-07T22:43:00.954Z"<br>  }<br>]</pre>

        <hr>

        <script>
          fetch('https://abs.incolumitas.com/ja3') 
            .then(response => response.json())
            .then(function(text) {
              document.getElementById('ja3').innerText = JSON.stringify(text, null, 2);
            })
            .catch((err) => {
              document.getElementById('ja3').innerText = err.toString();
            })
        </script>

        <h4 id="fingerprintjs" class="title is-4">fingerprintjs - Browser Fingerprint
          <a style="font-size: 70%" href="https://github.com/fingerprintjs/fingerprintjs">[1]</a> 
        </h4>
        <pre id="fpjs">ffe31d567bd285ba340797681a136cc3</pre>

        <hr>

        <script>
          function initFingerprintJS() {
            FingerprintJS.load().then(fp => {
              // The FingerprintJS agent is ready.
              // Get a visitor identifier when you'd like to.
              fp.get().then(result => {
                // This is the visitor identifier:
                document.getElementById('fpjs').innerText = result.visitorId
              });
            });
          }
        </script>
        <script async="" src="./fp.min.js" onload="initFingerprintJS()"></script>

        <h4 id="canvasFp" class="title is-4">Canvas Fingerprint
          <a style="font-size: 70%" href="https://browserleaks.com/canvas">[1]</a> 
        </h4>
        <canvas id="cfp" height="40" width="240"></canvas>
        <pre id="canvas_fingerprint">6CE02F78</pre>

        <hr>

        <h4 id="webglFp" class="title is-4">WebGL Fingerprint
          <a style="font-size: 70%" href="https://codepen.io/jon/pen/LLPKbz">[1]</a> 
        </h4>
        <canvas id="wfp" width="256" height="128"></canvas>
        <pre id="webgl_fingerprint">301740ff533ffb146abf0cce712f56cb8d06ba6bb399cd571c092b5519289cb8</pre>

        <script async="" src="./fingerprints.js"></script>

        <hr>
        
        <h4 id="browserData" class="title is-4">Fp-collect info (Modified by Me)</h4>
        <div>
            <pre id="fp">{
  "byteLength": 1,
  "appVersion": "5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36",
  "onLine": true,
  "doNotTrack": null,
  "hardwareConcurrency": 4,
  "timezone": 300,
  "historyLength": 2,
  "indexedDB": true,
  "openDatabase": true,
  "product": "Gecko",
  "fmget": false,
  "domAutomation": false,
  "cookieEnabled": true,
  "sendBeaconAvailable": true,
  "appName": "Netscape",
  "vendor": "Google Inc.",
  "appCodeName": "Mozilla",
  "userMediaAvailable": true,
  "javaEnabled": false,
  "batteryDetails": {
    "charging": true,
    "chargingTime": 0,
    "dischargingTime": null,
    "level": 1
  },
  "plugins": [
    "Chrome PDF Plugin::Portable Document Format::internal-pdf-viewer::__application/x-google-chrome-pdf~pdf~Portable Document Format",
    "Chrome PDF Viewer::::mhjfbmdgcfjbbpaeojofohoefgiehjai::__application/pdf~pdf~",
    "Native Client::::internal-nacl-plugin::__application/x-nacl~~Native Client Executable,application/x-pnacl~~Portable Native Client Executable"
  ],
  "mimeTypes": [
    "~~application/pdf~~pdf",
    "Portable Document Format~~application/x-google-chrome-pdf~~pdf",
    "Native Client Executable~~application/x-nacl~~",
    "Portable Native Client Executable~~application/x-pnacl~~"
  ],
  "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36",
  "platform": "Win32",
  "language": "en-US",
  "languages": [
    "en-US",
    "en"
  ],
  "screen": {
    "wInnerHeight": 790,
    "wOuterHeight": 860,
    "wOuterWidth": 1440,
    "wInnerWidth": 1440,
    "wScreenX": 0,
    "wPageXOffset": 0,
    "wPageYOffset": 0,
    "cWidth": 1440,
    "cHeight": 3488,
    "sWidth": 1440,
    "sHeight": 900,
    "sAvailWidth": 1440,
    "sAvailHeight": 860,
    "sColorDepth": 24,
    "sPixelDepth": 24,
    "wDevicePixelRatio": 1
  },
  "touchScreen": [
    0,
    false,
    false
  ],
  "videoCard": [
    "Google Inc.",
    "ANGLE (NVIDIA GeForce GTX 580 Direct3D11 vs_5_0 ps_5_0)"
  ],
  "multimediaDevices": {
    "speakers": 0,
    "micros": 1,
    "webcams": 1
  },
  "productSub": "20030107",
  "navigatorPrototype": [
    "vendorSub~~~function get vendorSub() { [native code] }",
    "productSub~~~function get productSub() { [native code] }",
    "vendor~~~function get vendor() { [native code] }",
    "maxTouchPoints~~~function get maxTouchPoints() { [native code] }",
    "userActivation~~~function get userActivation() { [native code] }",
    "doNotTrack~~~function get doNotTrack() { [native code] }",
    "geolocation~~~function get geolocation() { [native code] }",
    "connection~~~function get connection() { [native code] }",
    "plugins~~~function get plugins() { [native code] }",
    "mimeTypes~~~function get mimeTypes() { [native code] }",
    "webkitTemporaryStorage~~~function get webkitTemporaryStorage() { [native code] }",
    "webkitPersistentStorage~~~function get webkitPersistentStorage() { [native code] }",
    "hardwareConcurrency~~~function get hardwareConcurrency() { [native code] }",
    "cookieEnabled~~~function get cookieEnabled() { [native code] }",
    "appCodeName~~~function get appCodeName() { [native code] }",
    "appName~~~function get appName() { [native code] }",
    "appVersion~~~function get appVersion() { [native code] }",
    "platform~~~function get platform() { [native code] }",
    "product~~~function get product() { [native code] }",
    "userAgent~~~function get userAgent() { [native code] }",
    "language~~~function get language() { [native code] }",
    "languages~~~function get languages() { [native code] }",
    "onLine~~~function get onLine() { [native code] }",
    "getBattery~~~function getBattery() { [native code] }",
    "getGamepads~~~function getGamepads() { [native code] }",
    "javaEnabled~~~function javaEnabled() { [native code] }",
    "sendBeacon~~~function sendBeacon() { [native code] }",
    "vibrate~~~function vibrate() { [native code] }",
    "constructor~~~function Navigator() { [native code] }",
    "scheduling~~~function get scheduling() { [native code] }",
    "xr~~~function get xr() { [native code] }",
    "mediaCapabilities~~~function get mediaCapabilities() { [native code] }",
    "permissions~~~function get permissions() { [native code] }",
    "locks~~~function get locks() { [native code] }",
    "wakeLock~~~function get wakeLock() { [native code] }",
    "usb~~~function get usb() { [native code] }",
    "mediaSession~~~function get mediaSession() { [native code] }",
    "clipboard~~~function get clipboard() { [native code] }",
    "credentials~~~function get credentials() { [native code] }",
    "keyboard~~~function get keyboard() { [native code] }",
    "mediaDevices~~~function get mediaDevices() { [native code] }",
    "storage~~~function get storage() { [native code] }",
    "serviceWorker~~~function get serviceWorker() { [native code] }",
    "deviceMemory~~~function get deviceMemory() { [native code] }",
    "presentation~~~function get presentation() { [native code] }",
    "registerProtocolHandler~~~function registerProtocolHandler() { [native code] }",
    "unregisterProtocolHandler~~~function unregisterProtocolHandler() { [native code] }",
    "getInstalledRelatedApps~~~function getInstalledRelatedApps() { [native code] }",
    "clearAppBadge~~~function clearAppBadge() { [native code] }",
    "setAppBadge~~~function setAppBadge() { [native code] }",
    "getUserMedia~~~function getUserMedia() { [native code] }",
    "requestMIDIAccess~~~function requestMIDIAccess() { [native code] }",
    "requestMediaKeySystemAccess~~~function requestMediaKeySystemAccess() { [native code] }",
    "webkitGetUserMedia~~~function webkitGetUserMedia() { [native code] }",
    "bluetooth~~~function get bluetooth() { [native code] }",
    "constructor~~~function Navigator() { [native code] }",
    "__defineGetter__~~~",
    "__defineSetter__~~~",
    "hasOwnProperty~~~",
    "__lookupGetter__~~~",
    "__lookupSetter__~~~",
    "isPrototypeOf~~~",
    "propertyIsEnumerable~~~",
    "toString~~~",
    "valueOf~~~",
    "__proto__~~~",
    "toLocaleString~~~"
  ],
  "etsl": 33,
  "screenDesc": "function get width() { [native code] }",
  "phantomJS": [
    false,
    false,
    false
  ],
  "nightmareJS": false,
  "selenium": [
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false
  ],
  "webDriver": false,
  "errorsGenerated": [
    "azeaze is not defined",
    null,
    null,
    null,
    null,
    null,
    null,
    "Failed to construct 'WebSocket': The URL 'itsgonnafail' is invalid."
  ],
  "resOverflow": {
    "depth": 10476,
    "errorMessage": "Maximum call stack size exceeded",
    "errorName": "RangeError",
    "errorStacklength": 864
  },
  "accelerometerUsed": false,
  "screenMediaQuery": true,
  "hasChrome": true,
  "detailChrome": {
    "webstore": "TypeError: Cannot read property 'constructor' of undefined",
    "runtime": "function Object() { [native code] }",
    "app": "function Object() { [native code] }",
    "csi": "function Function() { [native code] }",
    "loadTimes": "function Function() { [native code] }",
    "connect": "Error in invocation of runtime.connect(optional string extensionId, optional object connectInfo): chrome.runtime.connect() called from a webpage must specify an Extension ID (string) for its first argument.",
    "sendMessage": "arguments is not defined"
  },
  "permissions": {
    "state": "prompt",
    "permission": "default"
  },
  "iframeChrome": "object",
  "debugTool": false,
  "battery": true,
  "deviceMemory": 8,
  "tpCanvas": {
    "0": 0,
    "1": 0,
    "2": 0,
    "3": 0
  },
  "sequentum": false,
  "audioCodecs": {
    "ogg": "probably",
    "mp3": "probably",
    "wav": "probably",
    "m4a": "maybe",
    "aac": "probably"
  },
  "videoCodecs": {
    "ogg": "probably",
    "h264": "probably",
    "webm": "probably",
    "mpeg4v": "",
    "mpeg4a": "",
    "theora": ""
  },
  "redPill": 0.05222497229787807,
  "redPill3": {
    "Math.abs": 0.5250014364719391,
    "Math.acos": 0.6750002503395081,
    "Math.asin": 0.5950033664703369,
    "Math.atanh": 0.5850009620189667,
    "Math.cbrt": 0.8999966084957123,
    "Math.exp": 0.8850023150444031,
    "Math.random": 0.6350018084049225,
    "Math.round": 0.5449987947940826,
    "Math.sqrt": 0.5350001156330109,
    "isFinite": 0.7250010967254639,
    "isNaN": 0.49499794840812683,
    "parseFloat": 0.4950016736984253,
    "parseInt": 0.6049983203411102,
    "JSON.parse": 2.9349997639656067
  }
}</pre>
        </div>
      
      <script>
        var fpscanner_results = {};

        fpCollect.generateFingerprint().then((fingerprint) => {
          document.getElementById('fp').innerHTML = JSON.stringify(fingerprint, null, 2);
      
          let xscanner = fpscanner;
          scannerResults = xscanner.analyseFingerprint(fingerprint);
      
          for (var name in scannerResults) {
            data = scannerResults[name];
            let ok = "FAIL";
            if (data.consistent == 2) {
              ok = "WARN";
            } else if (data.consistent == 3) {
              ok = "OK";
            }
            fpscanner_results[name] = ok;
          }

          // update detection-tests
          var el = document.getElementById('detection-tests');
          var obj = JSON.parse(el.innerHTML);
          obj.fpscanner = fpscanner_results;
          el.innerHTML = JSON.stringify(obj, null, 2);
        });
      </script>

      <script src="./newTests.js?version=16"></script>
      
      <script>
        runBotDetection = function () {
          var documentDetectionKeys = [
            "__webdriver_evaluate",
            "__selenium_evaluate",
            "__webdriver_script_function",
            "__webdriver_script_func",
            "__webdriver_script_fn",
            "__fxdriver_evaluate",
            "__driver_unwrapped",
            "__webdriver_unwrapped",
            "__driver_evaluate",
            "__selenium_unwrapped",
            "__fxdriver_unwrapped",
            "webdriver",
            "__driver_evaluate",
            "__webdriver_evaluate",
            "__selenium_evaluate",
            "__fxdriver_evaluate",
            "__driver_unwrapped",
            "__webdriver_unwrapped",
            "__selenium_unwrapped",
            "__fxdriver_unwrapped",
            "_Selenium_IDE_Recorder",
            "_selenium",
            "calledSelenium",
            "_WEBDRIVER_ELEM_CACHE",
            "ChromeDriverw",
            "driver-evaluate",
            "webdriver-evaluate",
            "selenium-evaluate",
            "webdriverCommand",
            "webdriver-evaluate-response",
            "__webdriverFunc",
            "__webdriver_script_fn",
            "__$webdriverAsyncExecutor",
            "__lastWatirAlert",
            "__lastWatirConfirm",
            "__lastWatirPrompt",
            "$chrome_asyncScriptInfo",
            "$cdc_asdjflasutopfhvcZLmcfl_"
          ];
      
          var windowDetectionKeys = [
            "_phantom",
            "__nightmare",
            "_selenium",
            "callPhantom",
            "callSelenium",
            "_Selenium_IDE_Recorder",
          ];
      
          for (const windowDetectionKey in windowDetectionKeys) {
            const windowDetectionKeyValue = windowDetectionKeys[windowDetectionKey];
            if (window[windowDetectionKeyValue]) {
              return true;
            }
          }
          for (const documentDetectionKey in documentDetectionKeys) {
            const documentDetectionKeyValue = documentDetectionKeys[documentDetectionKey];
            if (window['document'][documentDetectionKeyValue]) {
              return true;
            }
          }
      
          for (const documentKey in window['document']) {
            if (documentKey.match(/\$[a-z]dc_/) && window['document'][documentKey]['cache_']) {
              return true;
            }
          }
      
          if (window['external'] && window['external'].toString() && (window['external'].toString()['indexOf']('Sequentum') != -1)) return true;
      
          if (window['document']['documentElement']['getAttribute']('selenium')) return true;
          if (window['document']['documentElement']['getAttribute']('webdriver')) return true;
          if (window['document']['documentElement']['getAttribute']('driver')) return true;
      
          return false;
        };
      
        // User-Agent Test
        old_results.intoli['userAgent'] = /HeadlessChrome/.test(navigator.userAgent) ? 'FAIL' : 'OK';

        // Webdriver Test
        old_results.intoli['webDriver'] = navigator.webdriver ? 'FAIL' : 'OK';

        // Advanced Webdriver Test
        old_results.intoli['webDriverAdvanced'] = runBotDetection() ? 'FAIL' : 'OK';
      
        // Chrome Test
        old_results.intoli['webDriverAdvanced'] = !window.chrome ? 'FAIL' : 'OK';
      
        // Permissions Test
        const permissionsElement = document.getElementById('permissions-result');
        (async () => {
          const permissionStatus = await navigator.permissions.query({ name: 'notifications' });
          if (Notification.permission === 'denied' && permissionStatus.state === 'prompt') {
            old_results.intoli['permissions'] = 'FAIL';
          } else {
            old_results.intoli['permissions'] = 'OK';
          }
        })();
      
        // Plugins Length Test
        old_results.intoli['pluginsLength'] = navigator.plugins.length === 0 ? 'FAIL' : 'OK';

        // Plugins type Test
        if (!( navigator.plugins instanceof PluginArray ) || navigator.plugins.length === 0 || window.navigator.plugins[0].toString() !== '[object Plugin]') {
          old_results.intoli['pluginArray'] = 'FAIL';
        } else {
          old_results.intoli['pluginArray'] = 'OK';
        }
      
        // Languages Test
        old_results.intoli['languages'] = !navigator.languages || navigator.languages.length === 0 ? 'FAIL' : 'OK';
      
        // @TODO: FIX THIS WITHOUT Modernizr
        // Hairline Feature Test
        // const hairlineFeatureElement = document.getElementById('hairline-feature');
        // if (Modernizr.hairline) {
        //   hairlineFeatureElement.innerHTML = 'present';
        //   hairlineFeatureElement.classList.add('passed');
        // } else {
        //   hairlineFeatureElement.innerHTML = 'missing';
        //   hairlineFeatureElement.classList.add('failed');
        // }
      
        // Broken Image Dimensions Test
        const body = document.body;
        const image = document.createElement('img');
        image.onerror = function () {
          if (image.width == 0 && image.height == 0) {
            old_results.intoli['brokenImageDimensions'] = 'FAIL';
          } else {
            old_results.intoli['brokenImageDimensions'] = 'OK';
          }
        };
        body.appendChild(image);
        image.src = 'https://intoli.com/nonexistent-image.png';

        // FINALIZE
        // show to our dear user
        old_results.fpscanner = fpscanner_results;
        document.getElementById('detection-tests').innerHTML = JSON.stringify(old_results, null, 2);
      </script>

    </div>
    </section><img src="https://intoli.com/nonexistent-image.png">
  
</body></html>